# Text answers from Week 0

# Name:shishira

#Why would refactoring usefull.
Answer-1.Better design ,less lines of code concise writing,easier to understand for future dev.

#what would be code change to make house appear twice as high?
Answer--1.either change the default size to 20 or change line 27 and 30 to fdlt(turtle 8*size)

#What would the code change look like if we had never made a draw_house method that took size as a parameter (no need to actually write it, just explain what it would entail)?
Answer-the code would look like second commit of refactor_example

#Note that to call fdlt() the way it is implemented, we need to write `fdlt(bob, 20)`, for example. What would the function look like if we wanted to also pass in a parameter for the angle?
Answer--def (turtle,n,angle)

#What would we have to do to be able to write `bob.fdlt(length, angle)`
Answer--

Explain what each of the following lines does. Use the terminology you learned from the book (or Google)
	
	from TurtleWorld import *
	world = TurtleWorld()
	bob = Turtle()
	wait_for_user()

Answer:
from Turtleworld import *---this imorts module Turtleworld
world = turtleworld()--this instantiates Turtleworld as world.
bob = Turtle()--instantiates Turtle as bob
wait_for_user() -- keeps the console open.

#Why does theta need to be in units of degrees?
Answer--because the entier circle unit of measure in deg by taking 360.

#What would you have to do in order to make arc(turtle=bob, r=10, theta=6.3) draw a complete circle (i.e. to make arc accept radians, instead of degrees)?
Answer--multiply degress by (pi/180deg)



These questions pertain to the program you wrote in Week0.

-- What are the arguments of polygon()?  What type is each argument?
Answer:polygon(5,10) both are integers

-- What two turtle functions did you use to draw the sides of the polygon?
Answer:fd() and rt()

-- What are the arguments for polyline?  What type is each argument?
Answer:polyline(5,6.0,180).(int,float,int)





Suppose you wrote a function, center_circle(), that draws a circle of a given radius around the current location of the turtle and restores the turtle to its starting point.

-- What turtle functions would you use to move the turtle from the center to the edge of the circle and get ready to call the original circle() function?
Answer:fd()

-- Suppose the interface of this function requires the turtle to end up in the same place it started, facing in the same direction it started.
Answer:bk()

-- What is this type of requirement called?
Answer:huh?